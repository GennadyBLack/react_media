{"ast":null,"code":"import _defineProperty from \"/home/gena/app/react_media/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/gena/app/react_media/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport useLocalStorage from 'hooks/useLocalStorage';\nexport default (url => {\n  const baseUrl = 'https://conduit.productionready.io/api';\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        response = _useState4[0],\n        setResponse = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const _useState7 = useState({}),\n        _useState8 = _slicedToArray(_useState7, 2),\n        options = _useState8[0],\n        setOptions = _useState8[1];\n\n  const _useLocalStorage = useLocalStorage('token'),\n        _useLocalStorage2 = _slicedToArray(_useLocalStorage, 1),\n        token = _useLocalStorage2[0];\n\n  const doFetch = useCallback((options = {}) => {\n    setOptions(options);\n    setIsLoading(true);\n  }, []);\n  useEffect(() => {\n    let skipGetResponseAfterDestroy = false;\n\n    if (!isLoading) {\n      return;\n    }\n\n    const requestOptions = _objectSpread({}, options, {}, {\n      headers: {\n        authorization: token ? \"Token \".concat(token) : ''\n      }\n    });\n\n    axios(baseUrl + url, requestOptions).then(res => {\n      if (!skipGetResponseAfterDestroy) {\n        setResponse(res.data);\n        setIsLoading(false);\n      }\n    }).catch(error => {\n      if (!skipGetResponseAfterDestroy) {\n        setError(error.response.data);\n        setIsLoading(false);\n      }\n    });\n    return () => {\n      skipGetResponseAfterDestroy = true;\n    };\n  }, [isLoading, url, options, token]);\n  return [{\n    isLoading,\n    response,\n    error\n  }, doFetch];\n});","map":{"version":3,"sources":["/home/gena/app/react_media/src/node_modules/hooks/useFetch.js"],"names":["useState","useEffect","useCallback","axios","useLocalStorage","url","baseUrl","isLoading","setIsLoading","response","setResponse","error","setError","options","setOptions","token","doFetch","skipGetResponseAfterDestroy","requestOptions","headers","authorization","then","res","data","catch"],"mappings":";;;;;;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,gBAAeC,GAAG,IAAI;AACpB,QAAMC,OAAO,GAAG,wCAAhB;;AADoB,oBAEcN,QAAQ,CAAC,KAAD,CAFtB;AAAA;AAAA,QAEbO,SAFa;AAAA,QAEFC,YAFE;;AAAA,qBAGYR,QAAQ,CAAC,IAAD,CAHpB;AAAA;AAAA,QAGbS,QAHa;AAAA,QAGHC,WAHG;;AAAA,qBAIMV,QAAQ,CAAC,IAAD,CAJd;AAAA;AAAA,QAIbW,KAJa;AAAA,QAINC,QAJM;;AAAA,qBAKUZ,QAAQ,CAAC,EAAD,CALlB;AAAA;AAAA,QAKba,OALa;AAAA,QAKJC,UALI;;AAAA,2BAMJV,eAAe,CAAC,OAAD,CANX;AAAA;AAAA,QAMbW,KANa;;AAQpB,QAAMC,OAAO,GAAGd,WAAW,CAAC,CAACW,OAAO,GAAG,EAAX,KAAkB;AAC5CC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAH0B,EAGxB,EAHwB,CAA3B;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,2BAA2B,GAAG,KAAlC;;AACA,QAAI,CAACV,SAAL,EAAgB;AACd;AACD;;AAED,UAAMW,cAAc,qBACfL,OADe,MAEf;AACDM,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEL,KAAK,mBAAYA,KAAZ,IAAsB;AADnC;AADR,KAFe,CAApB;;AASAZ,IAAAA,KAAK,CAACG,OAAO,GAAGD,GAAX,EAAgBa,cAAhB,CAAL,CACGG,IADH,CACQC,GAAG,IAAI;AACX,UAAI,CAACL,2BAAL,EAAkC;AAChCP,QAAAA,WAAW,CAACY,GAAG,CAACC,IAAL,CAAX;AACAf,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KANH,EAOGgB,KAPH,CAOSb,KAAK,IAAI;AACd,UAAI,CAACM,2BAAL,EAAkC;AAChCL,QAAAA,QAAQ,CAACD,KAAK,CAACF,QAAN,CAAec,IAAhB,CAAR;AACAf,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAZH;AAaA,WAAO,MAAM;AACXS,MAAAA,2BAA2B,GAAG,IAA9B;AACD,KAFD;AAGD,GA/BQ,EA+BN,CAACV,SAAD,EAAYF,GAAZ,EAAiBQ,OAAjB,EAA0BE,KAA1B,CA/BM,CAAT;AAiCA,SAAO,CAAC;AAACR,IAAAA,SAAD;AAAYE,IAAAA,QAAZ;AAAsBE,IAAAA;AAAtB,GAAD,EAA+BK,OAA/B,CAAP;AACD,CA/CD","sourcesContent":["import {useState, useEffect, useCallback} from 'react'\nimport axios from 'axios'\n\nimport useLocalStorage from 'hooks/useLocalStorage'\n\nexport default url => {\n  const baseUrl = 'https://conduit.productionready.io/api'\n  const [isLoading, setIsLoading] = useState(false)\n  const [response, setResponse] = useState(null)\n  const [error, setError] = useState(null)\n  const [options, setOptions] = useState({})\n  const [token] = useLocalStorage('token')\n\n  const doFetch = useCallback((options = {}) => {\n    setOptions(options)\n    setIsLoading(true)\n  }, [])\n\n  useEffect(() => {\n    let skipGetResponseAfterDestroy = false\n    if (!isLoading) {\n      return\n    }\n\n    const requestOptions = {\n      ...options,\n      ...{\n        headers: {\n          authorization: token ? `Token ${token}` : ''\n        }\n      }\n    }\n\n    axios(baseUrl + url, requestOptions)\n      .then(res => {\n        if (!skipGetResponseAfterDestroy) {\n          setResponse(res.data)\n          setIsLoading(false)\n        }\n      })\n      .catch(error => {\n        if (!skipGetResponseAfterDestroy) {\n          setError(error.response.data)\n          setIsLoading(false)\n        }\n      })\n    return () => {\n      skipGetResponseAfterDestroy = true\n    }\n  }, [isLoading, url, options, token])\n\n  return [{isLoading, response, error}, doFetch]\n}\n"]},"metadata":{},"sourceType":"module"}