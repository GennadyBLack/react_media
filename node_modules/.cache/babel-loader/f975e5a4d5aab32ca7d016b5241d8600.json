{"ast":null,"code":"import _slicedToArray from \"/home/gena/app/react_media/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gena/app/react_media/src/node_modules/pages/editArticle/index.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport ArticleForm from 'components/articleForm';\nimport useFetch from 'hooks/useFetch';\nimport { CurrentUserContext } from 'contexts/currentUser';\n\nconst EditArticle = ({\n  match\n}) => {\n  const slug = match.params.slug;\n  const apiUrl = \"/articles/\".concat(slug);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isSuccessfullSubmit = _useState2[0],\n        setIsSuccessfullSubmit = _useState2[1];\n\n  const _useFetch = useFetch(apiUrl),\n        _useFetch2 = _slicedToArray(_useFetch, 2),\n        _useFetch2$ = _useFetch2[0],\n        updateArticleResponse = _useFetch2$.response,\n        updateArticleError = _useFetch2$.error,\n        doUpdateArticle = _useFetch2[1];\n\n  const _useFetch3 = useFetch(apiUrl),\n        _useFetch4 = _slicedToArray(_useFetch3, 2),\n        fetchArticleResponse = _useFetch4[0].response,\n        doFetchArticle = _useFetch4[1];\n\n  const _useContext = useContext(CurrentUserContext),\n        _useContext2 = _slicedToArray(_useContext, 1),\n        currentUserState = _useContext2[0];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        initialValues = _useState4[0],\n        setInitialValues = _useState4[1];\n\n  const onSubmit = article => {\n    doUpdateArticle({\n      method: 'put',\n      data: {\n        article\n      }\n    });\n  };\n\n  useEffect(() => {\n    doFetchArticle();\n  }, [doFetchArticle]);\n  useEffect(() => {\n    if (!fetchArticleResponse) {\n      return;\n    }\n\n    setInitialValues({\n      title: fetchArticleResponse.article.title,\n      description: fetchArticleResponse.article.description,\n      body: fetchArticleResponse.article.body,\n      tagList: fetchArticleResponse.article.tagList.join(' ')\n    });\n  }, [fetchArticleResponse]);\n  useEffect(() => {\n    if (!updateArticleResponse) {\n      return;\n    }\n\n    setIsSuccessfullSubmit(true);\n  }, [updateArticleResponse]);\n\n  if (currentUserState.isLoggedIn === null) {\n    return null;\n  }\n\n  if (currentUserState.isLoggedIn === false) {\n    return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n  if (isSuccessfullSubmit) {\n    return React.createElement(Redirect, {\n      to: \"/articles/\".concat(slug),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(ArticleForm, {\n    onSubmit: onSubmit,\n    initialValues: initialValues,\n    errors: updateArticleError && updateArticleError.errors || {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }));\n};\n\nexport default EditArticle;","map":{"version":3,"sources":["/home/gena/app/react_media/src/node_modules/pages/editArticle/index.js"],"names":["React","useState","useEffect","useContext","Redirect","ArticleForm","useFetch","CurrentUserContext","EditArticle","match","slug","params","apiUrl","isSuccessfullSubmit","setIsSuccessfullSubmit","updateArticleResponse","response","updateArticleError","error","doUpdateArticle","fetchArticleResponse","doFetchArticle","currentUserState","initialValues","setInitialValues","onSubmit","article","method","data","title","description","body","tagList","join","isLoggedIn","errors"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport {Redirect} from 'react-router-dom'\n\nimport ArticleForm from 'components/articleForm'\nimport useFetch from 'hooks/useFetch'\nimport {CurrentUserContext} from 'contexts/currentUser'\n\nconst EditArticle = ({match}) => {\n  const slug = match.params.slug\n  const apiUrl = `/articles/${slug}`\n  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)\n  const [\n    {response: updateArticleResponse, error: updateArticleError},\n    doUpdateArticle\n  ] = useFetch(apiUrl)\n  const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiUrl)\n  const [currentUserState] = useContext(CurrentUserContext)\n  const [initialValues, setInitialValues] = useState(null)\n\n  const onSubmit = article => {\n    doUpdateArticle({\n      method: 'put',\n      data: {\n        article\n      }\n    })\n  }\n\n  useEffect(() => {\n    doFetchArticle()\n  }, [doFetchArticle])\n\n  useEffect(() => {\n    if (!fetchArticleResponse) {\n      return\n    }\n\n    setInitialValues({\n      title: fetchArticleResponse.article.title,\n      description: fetchArticleResponse.article.description,\n      body: fetchArticleResponse.article.body,\n      tagList: fetchArticleResponse.article.tagList.join(' ')\n    })\n  }, [fetchArticleResponse])\n\n  useEffect(() => {\n    if (!updateArticleResponse) {\n      return\n    }\n    setIsSuccessfullSubmit(true)\n  }, [updateArticleResponse])\n\n  if (currentUserState.isLoggedIn === null) {\n    return null\n  }\n\n  if (currentUserState.isLoggedIn === false) {\n    return <Redirect to=\"/\" />\n  }\n\n  if (isSuccessfullSubmit) {\n    return <Redirect to={`/articles/${slug}`} />\n  }\n\n  return (\n    <div>\n      <ArticleForm\n        onSubmit={onSubmit}\n        initialValues={initialValues}\n        errors={(updateArticleError && updateArticleError.errors) || {}}\n      />\n    </div>\n  )\n}\n\nexport default EditArticle\n"]},"metadata":{},"sourceType":"module"}