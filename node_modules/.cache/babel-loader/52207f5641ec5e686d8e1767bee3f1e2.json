{"ast":null,"code":"import _slicedToArray from \"/home/gena/app/react_media/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gena/app/react_media/src/node_modules/pages/tagFeed/index.js\";\nimport React, { useEffect, Fragment } from 'react';\nimport { stringify } from 'query-string';\nimport Feed from 'components/feed';\nimport useFetch from 'hooks/useFetch';\nimport Pagination from 'components/pagination';\nimport { getPaginator, limit } from 'utils';\nimport PopularTags from 'components/popularTags';\nimport Loading from 'components/loading';\nimport ErrorMessage from 'components/errorMessage';\nimport FeedToggler from 'components/feedToggler';\nimport Banner from 'components/banner';\n\nconst TagFeed = ({\n  location,\n  match\n}) => {\n  const tagName = match.params.slug;\n  console.log('tagName', tagName);\n\n  const _getPaginator = getPaginator(location.search),\n        offset = _getPaginator.offset,\n        currentPage = _getPaginator.currentPage;\n\n  const stringifiedParams = stringify({\n    limit,\n    offset,\n    tag: tagName\n  });\n  const apiUrl = \"/articles?\".concat(stringifiedParams);\n  const currentUrl = match.url;\n\n  const _useFetch = useFetch(apiUrl),\n        _useFetch2 = _slicedToArray(_useFetch, 2),\n        _useFetch2$ = _useFetch2[0],\n        response = _useFetch2$.response,\n        error = _useFetch2$.error,\n        isLoading = _useFetch2$.isLoading,\n        doFetch = _useFetch2[1];\n\n  useEffect(() => {\n    doFetch();\n  }, [currentPage, doFetch]);\n  return React.createElement(\"div\", {\n    className: \"home-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Banner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"container page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(FeedToggler, {\n    tagName: tagName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), isLoading && React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), error && React.createElement(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), !isLoading && response && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Feed, {\n    articles: response.articles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Pagination, {\n    total: response.articlesCount,\n    limit: limit,\n    url: currentUrl,\n    currentPage: currentPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(PopularTags, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })))));\n};\n\nexport default TagFeed;","map":{"version":3,"sources":["/home/gena/app/react_media/src/node_modules/pages/tagFeed/index.js"],"names":["React","useEffect","Fragment","stringify","Feed","useFetch","Pagination","getPaginator","limit","PopularTags","Loading","ErrorMessage","FeedToggler","Banner","TagFeed","location","match","tagName","params","slug","console","log","search","offset","currentPage","stringifiedParams","tag","apiUrl","currentUrl","url","response","error","isLoading","doFetch","articles","articlesCount"],"mappings":"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","sourcesContent":["import React, {useEffect, Fragment} from 'react'\nimport {stringify} from 'query-string'\n\nimport Feed from 'components/feed'\nimport useFetch from 'hooks/useFetch'\nimport Pagination from 'components/pagination'\nimport {getPaginator, limit} from 'utils'\nimport PopularTags from 'components/popularTags'\nimport Loading from 'components/loading'\nimport ErrorMessage from 'components/errorMessage'\nimport FeedToggler from 'components/feedToggler'\nimport Banner from 'components/banner'\n\nconst TagFeed = ({location, match}) => {\n  const tagName = match.params.slug\n  console.log('tagName', tagName)\n  const {offset, currentPage} = getPaginator(location.search)\n  const stringifiedParams = stringify({\n    limit,\n    offset,\n    tag: tagName\n  })\n  const apiUrl = `/articles?${stringifiedParams}`\n  const currentUrl = match.url\n  const [{response, error, isLoading}, doFetch] = useFetch(apiUrl)\n\n  useEffect(() => {\n    doFetch()\n  }, [currentPage, doFetch])\n\n  return (\n    <div className=\"home-page\">\n      <Banner />\n      <div className=\"container page\">\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <FeedToggler tagName={tagName} />\n            {isLoading && <Loading />}\n            {error && <ErrorMessage />}\n            {!isLoading && response && (\n              <Fragment>\n                <Feed articles={response.articles} />\n                <Pagination\n                  total={response.articlesCount}\n                  limit={limit}\n                  url={currentUrl}\n                  currentPage={currentPage}\n                />\n              </Fragment>\n            )}\n          </div>\n          <div className=\"col-md-3\">\n            <PopularTags />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TagFeed\n"]},"metadata":{},"sourceType":"module"}